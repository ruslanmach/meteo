import express from 'express';
import fetch from 'node-fetch';
import path from 'path';
import { fileURLToPath } from 'url';

const app = express();
const port = process.env.PORT || 3000;


// –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const ESP_IP = 'meteoesp.hopto.org'; // –î–æ–º–µ–Ω No-IP
const API_TIMEOUT = 10000; // –ó–±—ñ–ª—å—à–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥

// Middleware
app.use(express.static(__dirname));
app.use('/img', express.static(path.join(__dirname, 'img')));

// –î–ª—è –æ–±—Ä–æ–±–∫–∏ CORS
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    next();
});

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–µ–ª–µ
const handleRelayRequest = async (endpoint, res) => {
    try {
        console.log(`üîÑ –ó–∞–ø–∏—Ç –¥–æ ESP: ${endpoint}`);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AbortController –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç–∞–π–º–∞—É—Ç—É
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);

        const response = await fetch(`http://${ESP_IP}${endpoint}`, {
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
            console.error(`ESP error: ${response.status} ${response.statusText}`);
            return res.status(502).json({ error: '–ü–æ–º–∏–ª–∫–∞ ESP' });
        }

        res.sendStatus(200); // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å 200
    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: ${error.message}`);
        res.status(504).json({ error: 'ESP –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ —Ç–∞–π–º–∞—É—Ç' });
    }
};

// –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ –≤–∏–º–∏–∫–∞–Ω–Ω—è —Ä–µ–ª–µ
app.get('/relay/on', (req, res) => handleRelayRequest('/relay/on', res));
app.get('/relay/off', (req, res) => handleRelayRequest('/relay/off', res));

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Ä–µ–ª–µ
app.get('/state', async (req, res) => {
    try {
        console.log("üîÑ –ó–∞–ø–∏—Ç –¥–æ ESP –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Ä–µ–ª–µ");

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AbortController –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é —Ç–∞–π–º–∞—É—Ç—É
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);

        const response = await fetch(`http://${ESP_IP}/state`, {
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
            throw new Error(`–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≤—ñ–¥ ESP: ${response.status}`);
        }

        const data = await response.json();
        console.log("üì° –°—Ç–∞–Ω —Ä–µ–ª–µ –æ—Ç—Ä–∏–º–∞–Ω–æ:", data);
        res.json(data); // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞–Ω —Ä–µ–ª–µ –∫–ª—ñ—î–Ω—Ç—É
    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É —Ä–µ–ª–µ: ${error.message}`);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞–±–æ ESP –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π' });
    }
});

// –û–±—Ä–æ–±–∫–∞ 404 (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)
app.use((req, res) => {
    res.status(404).send('–°—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`);
    console.log(`IP ESP: ${ESP_IP}`);
});

